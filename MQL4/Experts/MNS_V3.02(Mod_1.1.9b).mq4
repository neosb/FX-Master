////////////////////////////////////////////////////////
//     Momods_Night_Scalper_V3.02_Basic_MMfix         //
//     Coded by Momods @ worldwide-invest.org         //
////////////////////////////////////////////////////////
//        if you make money from this EA              //
//  please make donnation to my paypal Account        //
//              mohddisi@yahoo.com                    //
////////////////////////////////////////////////////////
// 2013-08-20 by Capella at worldwide-invest.org
// - added CloseIfIndy option to close all / not close all if indicators confirms. Original code is similar to this set to TRUE
//=================================================================================================================================================//
#property copyright "Copyright © 2013, Momods"
#property link      "http://worldwide-invest.org/"

#import "Kernel32.dll"
void GetSystemTime(int& TimeArray[]);
#import
//=================================================================================================================================================//
extern string S0="-------General Sets-------";
extern string EA_Comment          = "";     
extern string S_1                 = "if MAGIC=0, a unique value will be generated by EA";  
extern bool   SendMailInfo        = false;   
extern int    Magic               = 0;
extern bool   New_Trade           = True;
extern int    Slippage            = 3;
extern string S1="-------Lot and Risk-------";
extern bool   CountRiskBaseSL     = false;
extern double lot                 = 0;
extern double Risk                = 7.5;
extern string S2="-------Spread Limits-------";
extern string SpreandInfo         = "if Max_Spread=0, EA will use internal settings";
extern double Max_Spread_Open     = 0.0;
extern double Max_Spread_Close    = 0.0;
extern string S9="-------Hours Limits-------";
extern string HoursInfo           = "if Open_Hour=0 or/and Close_Hour=0, EA will use internal settings";
extern int    Open_Hour           = 0;
extern int    Close_Hour          = 0;
extern string S3="-------Times and Days-------";
extern int    GMT_Offset          = 99;
extern int    DelaySessionMinutes = 0;
extern bool   TradeOnFriday       = False;
extern int    Friday_Hour         = 15;
extern string S4="-------ATR and PriceLevel Filter-------";
extern bool   UseATRfilter        = false;
extern int    Atr_Period          = 14;
extern string TypeATRfilterStr    = "1=Lower Level, 2=Higher Level";
extern int    Type_ATR_level      = 1;        
extern double AtrLevel            = 0.0006;
extern bool   UsePriceLevelFilter = true;
extern int    PrvHoursCheck1      = 0;
extern int    PrvHoursCheck2      = 3;
extern string S5="-------News Filter-------";
extern bool   Use_NewsFilter      = true;
extern bool   IncludeHigh         = true;
extern int    MinsBeforeHigh      = 360;  // mins before an event to stay out of trading
extern int    MinsAfterHigh       = 240;  // mins after  an event to stay out of trading
extern bool   IncludeMedium       = true;
extern int    MinsBeforeMedium    = 180;
extern int    MinsAfterMedium     = 120;
extern bool   IncludeLow          = true;
extern int    MinsBeforeLow       = 180;
extern int    MinsAfterLow        = 30;
extern bool   IncludeSpeaks       = false; // news items with "Speaks" in them have different characteristics
extern int    MinsBeforeSpeaks    = 360;
extern int    MinsAfterSpeaks     = 240;
extern bool	  ReportAllForUSD	    = true;
extern bool   ReportAllForEUR     = true;
extern bool   ReportAllForGBP     = true;
extern bool   ReportAllForNZD     = true;
extern bool   ReportAllForJPY     = true;
extern bool   ReportAllForAUD     = true;
extern bool   ReportAllForCHF     = true;
extern bool   ReportAllForCAD     = true;
extern bool   ReportAllForCNY     = false;
extern string S6="-------Manage Loss Trade-------";
extern bool   PauseOnLoss         = true;
extern double PauseMinPips        = 5.0;
extern int    PauseMaxMinutes     = 180;
extern string S7="-------Second Trade-------";
extern bool   Allow_Second_Trade  = false;
extern double Distance            = 12;
extern double Lot_Factor          = 0.5;
extern string InfoSets            = "!!! Below this line works sets if UseAutoSets=false !!!";
extern bool   UseAutoSets         = true;
extern string S8="-------TakeProfit and StopLoss-------";
extern bool   Hide_SL_TP          = False;
extern double TakeProfit          = 60;
extern double StopLoss            = 50;
extern bool   UseTrailingSL       = true;
extern double TrailingPips        = 4;
extern double TrailingAfter       = 9;
extern string S10="-------CCI Sets-------";
extern bool   Use_CCI             = False;
extern int    CCI_Period          = 10;
extern double CCI_Entry           = 200;
extern double CCI_Exit            = 140;
extern string S11="-------WPR Sets-------";
extern bool   Use_WPR             = true;
extern int    WPR_Period          = 10;
extern double WPR_Entry           = 91;
extern double WPR_Exit            = 40;
extern string S12="-------RSI Sets-------";
extern bool   Use_RSI             = false;
extern int    RSI_Period          = 70;
extern double RSI_Entry           = 50;
extern string S13="-------Fractals Sets-------";
extern bool   Use_Fractals        = true;
extern double MidFractalDist      = 5;
extern double OppositFractalDist  = 10;
extern bool   Show_Fractal_Levels = False;
extern string S14="-------MA Sets-------";
extern bool   Use_MA_Dist         = false;
extern double MA_Dist_Period      = 4;
extern string Mode                = "0= Simple, 1=Exponential, 2=Smoothed, 3=Linear Weighted";
extern double MA_Dist_Mode        = 1;
extern double Dist_to_MA          = 4;
extern string S15="-------MA1 Sets-------";
extern bool   Use_MA1             = False;
extern int    MA_Period1          = 75;
extern string Mode1               = "0= Simple, 1=Exponential, 2=Smoothed, 3=Linear Weighted";
extern int    MA_Mode1            = 2;
extern string S16="-------MA2 Sets-------";
extern bool   Use_MA2             = False;
extern int    MA_Period2          = 19;
extern string Mode2               = "0= Simple, 1=Exponential, 2=Smoothed, 3=Linear Weighted";
extern int    MA_Mode2            = 2;
extern string S17="-------MA2 Slope Sets-------";
extern bool   Use_MA2_Slope       = False;
extern double MA_Slope            = 1;
extern string S18="-------BB Sets-------";
extern bool   Use_BB              = False;
extern int    BB_Period           = 10;
extern int    BB_Dev              = 2;
extern int    BB_Range            = 12;
extern int    BB_Penetration      = 2;
extern bool   Use_BB_Direction    = False;
extern string S19="---Close all if Indicators confirm---";
extern bool   CloseIfIndy 			 = TRUE;  // if TRUE, all orders can be closed if any indicators confirms this, if FALSE orders are only closed by SL or TP
//=================================================================================================================================================//
bool Trade;
datetime Last_Time;
double Lot;
double LastUpFractal,LastDownFractal;
double midFractal;
int SpreadSampleSize=10;  
double Spread[];
string Session="";
int CCI_Buy_Sig;
int CCI_Sell_Sig;
int WPR_Buy_Sig;
int WPR_Sell_Sig;
int MA_Buy_Sig1;
int MA_Sell_Sig1;
int MA_Buy_Sig2;
int MA_Sell_Sig2;
int Fractals_Buy_Sig;
int Fractals_Sell_Sig;  
int CCI_Exit_Buy_Sig;
int CCI_Exit_Sell_Sig;
int WPR_Exit_Buy_Sig;
int WPR_Exit_Sell_Sig; 
int MA_Slope_Buy_Sig;               
int MA_Slope_Sell_Sig;
int BB_Buy_Sig;               
int BB_Sell_Sig;
bool Trade_Pause_Buy_Sig;
bool Trade_Pause_Sell_Sig;
int MA_Dist_Buy_Sig;               
int MA_Dist_Sell_Sig;
int RSI_Buy_Sig;
int RSI_Sell_Sig;
//--------------------------
double CCI_1; 
double WPR_1; 
double MA_1_1; 
double MA_1_2; 
double MA_2_1; 
double MA_2_2; 
double BB_U_1; 
double BB_U_2; 
double BB_U_3; 
double BB_L_1; 
double BB_L_2; 
double BB_L_3; 
double MA_3_1; 
double RSI_1; 
//--------------------------
int FilterATR;
int TotalOpenOrders;
int LastOpenType;
int LastClosedType;
int LastClosedTime;
int MultiplierDigit;
double PointsDec;
double LastBuyPrice;
double LastSellPrice;
double SumProfit;
double NetProfit;
double HistoryProfits;
double LastClosedProfit;
double LastClosedPrice;
double LastClosedPips;
double StopLevel;
string EA_Name;
int DSTprv=0;
int DSTcur=0;
int DSTextern=0;
int StarHour=0;
int EndHour=0;
int CheckLevelPriceBuy=0;
int CheckLevelPriceSell=0;
int FirstSignalBuy=0;
int FirstSignalSell=0;
double LotStep;
double MinLot;
double MaxLot;
double TickValue;
double TickSize;
//=================================================================================================================================================//
int init()
{
  EA_Name=WindowExpertName();
  //-----------------------------------------------------------------
  //digits points
  PointsDec=Point;
  MultiplierDigit=1;
  if(MarketInfo(Symbol(), MODE_DIGITS) == 5.0 || MarketInfo(Symbol(), MODE_DIGITS) == 3.0) MultiplierDigit=10;
  PointsDec*=MultiplierDigit;
  Slippage*=MultiplierDigit;
  //-----------------------------------------------------------------
  //Lots info
  LotStep = MarketInfo(Symbol(),MODE_LOTSTEP);
  MinLot = MarketInfo(Symbol(),MODE_MINLOT);
  MaxLot = MarketInfo(Symbol(),MODE_MAXLOT);
  TickValue = MarketInfo(Symbol(),MODE_TICKVALUE);
  TickSize = MarketInfo(Symbol(),MODE_TICKSIZE);
  //-----------------------------------------------------------------
  //Background
  if((!IsTesting())&&(!IsOptimization()))
  {
  if(ObjectFind("Background1")==-1)
  {
  ObjectCreate("Background1",OBJ_LABEL,0,0,0);
  ObjectSet("Background1",OBJPROP_CORNER,0);
  ObjectSet("Background1",OBJPROP_BACK,FALSE);
  ObjectSet("Background1",OBJPROP_YDISTANCE,18);
  ObjectSet("Background1",OBJPROP_XDISTANCE,0);
  ObjectSetText("Background1","g",125,"Webdings",Black);
  }
  //---
  if(ObjectFind("Background2")==-1)
  {
  ObjectCreate("Background2",OBJ_LABEL,0,0,0);
  ObjectSet("Background2",OBJPROP_CORNER,0);
  ObjectSet("Background2",OBJPROP_BACK,FALSE);
  ObjectSet("Background2",OBJPROP_YDISTANCE,180);
  ObjectSet("Background2",OBJPROP_XDISTANCE,0);
  ObjectSetText("Background2","g",125,"Webdings",Black);
  }
  }
  //-----------------------------------------------------------------
  //Set Magic Number
  if(Magic==0) Magic=MagicNumber();
  //-----------------------------------------------------------------
  //Auto Sets
  if(StringSubstr(Symbol(),0,6)=="EURCAD")
  {
  if(Max_Spread_Open==0) Max_Spread_Open=6; if(Max_Spread_Close==0) Max_Spread_Close=6;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=60;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=120;
  Use_WPR=true; WPR_Period=10; WPR_Entry=91; WPR_Exit=40;
  Use_Fractals=true; MidFractalDist=6; OppositFractalDist=11;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="EURGBP")
  {
  if(Max_Spread_Open==0)Max_Spread_Open=4; if(Max_Spread_Close==0)Max_Spread_Close=4;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=60;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=120;
  Use_WPR=true; WPR_Period=11; WPR_Entry=90; WPR_Exit=40;
  Use_Fractals=true; MidFractalDist=5; OppositFractalDist=9;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="USDCAD")
  {
  if(Max_Spread_Open==0)Max_Spread_Open=4; if(Max_Spread_Close==0)Max_Spread_Close=4;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=60;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=120; CCI_Exit=125;
  Use_WPR=true; WPR_Period=10; WPR_Entry=90; WPR_Exit=35;
  Use_Fractals=true; MidFractalDist=8; OppositFractalDist=11;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="EURCHF")
  { 
  if(Max_Spread_Open==0)Max_Spread_Open=5; if(Max_Spread_Close==0)Max_Spread_Close=5;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=40;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=130;
  Use_WPR=true; WPR_Period=10; WPR_Entry=91; WPR_Exit=30;
  Use_Fractals=true; MidFractalDist=7; OppositFractalDist=9;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="USDCHF")
  { 
  if(Max_Spread_Open==0)Max_Spread_Open=4; if(Max_Spread_Close==0)Max_Spread_Close=4;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=40;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=120;
  Use_WPR=true; WPR_Period=10; WPR_Entry=91; WPR_Exit=40;
  Use_Fractals=true; MidFractalDist=6; OppositFractalDist=9;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="GBPCHF")
  { 
  if(Max_Spread_Open==0)Max_Spread_Open=6; if(Max_Spread_Close==0)Max_Spread_Close=6;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=50;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=130;
  Use_WPR=true; WPR_Period=10; WPR_Entry=91; WPR_Exit=30;
  Use_Fractals=true; MidFractalDist=9; OppositFractalDist=15;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="GBPCAD")
  {  
  if(Max_Spread_Open==0)Max_Spread_Open=6; if(Max_Spread_Close==0)Max_Spread_Close=6;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=50;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=130;
  Use_WPR=true; WPR_Period=10; WPR_Entry=91; WPR_Exit=30;
  Use_Fractals=true; MidFractalDist=7; OppositFractalDist=13;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="EURUSD")
  {  
  if(Max_Spread_Open==0)Max_Spread_Open=4; if(Max_Spread_Close==0)Max_Spread_Close=4;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=40;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=120;
  Use_WPR=true; WPR_Period=8; WPR_Entry=93; WPR_Exit=42;
  Use_Fractals=True; MidFractalDist=8; OppositFractalDist=15;
  Use_MA1=true; MA_Period1=75;
  Use_MA2=False; MA_Period2=20;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="CADCHF")
  {
  if(Max_Spread_Open==0)Max_Spread_Open=6; if(Max_Spread_Close==0)Max_Spread_Close=6;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=50;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=130;
  Use_WPR=true; WPR_Period=10; WPR_Entry=91; WPR_Exit=30;
  Use_Fractals=true; MidFractalDist=7; OppositFractalDist=13;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //---
  if(StringSubstr(Symbol(),0,6)=="GBPUSD")
  {  
  if(Max_Spread_Open==0)Max_Spread_Open=4; if(Max_Spread_Close==0)Max_Spread_Close=4;
  if(Open_Hour==0) Open_Hour=20; if(Close_Hour==0) Close_Hour=23;
  if(UseAutoSets==true)
  {
  StopLoss=40;
  TakeProfit=60;
  TrailingPips=4;
  TrailingAfter=5;
  Use_CCI=true; CCI_Period=10; CCI_Entry=100; CCI_Exit=125;
  Use_WPR=true; WPR_Period=12; WPR_Entry=90; WPR_Exit=38;
  Use_Fractals=true; MidFractalDist=6; OppositFractalDist=11;
  Use_MA1=False; MA_Period1=25;
  Use_MA2_Slope=False; MA_Slope= 5;
  }
  }
  //-----------------------------------------------------------------
  //Confirm range
  StopLevel=MathMax(MarketInfo(Symbol(),MODE_FREEZELEVEL)/MultiplierDigit,MarketInfo(Symbol(),MODE_STOPLEVEL)/MultiplierDigit);
  if(TakeProfit<StopLevel) TakeProfit=StopLevel;
  if(StopLoss<StopLevel) StopLoss=StopLevel;
  if(TrailingPips<StopLevel) TrailingPips=StopLevel;
  if((DelaySessionMinutes<0)||(DelaySessionMinutes>59)) DelaySessionMinutes=0;
  if((Type_ATR_level<1)||(Type_ATR_level>2)) Type_ATR_level=1;
  if(TrailingAfter<TrailingPips) TrailingAfter=TrailingPips;
  //-----------------------------------------------------------------
  //detect current DST
  if((IsTesting())||(IsOptimization()))
  {
  int GetMonth=Month();
  int GetDayOfMonth=Day();
  int GetDayOfWeek=DayOfWeek();
  if(GetDayOfWeek==0) GetDayOfWeek=7;
  //---
  if((GetMonth>3)&&(GetMonth<10)) DSTcur=1;
  if((GetMonth<3)&&(GetMonth>10)) DSTcur=0;
  if((GetMonth==3)&&(GetDayOfMonth<=24)) DSTcur=0;
  if((GetMonth==10)&&(GetDayOfMonth<=24)) DSTcur=1;
  //---
  if((GetMonth==3)&&(GetDayOfMonth>24))//detect last week
  {
  if((GetDayOfMonth==31)&&(GetDayOfWeek==7)) DSTcur=1;
  if((GetDayOfMonth==30)&&(GetDayOfWeek==7)) DSTcur=1;
  if((GetDayOfMonth==29)&&(GetDayOfWeek==7)) DSTcur=1;
  if((GetDayOfMonth==28)&&(GetDayOfWeek==7)) DSTcur=1;
  if((GetDayOfMonth==27)&&(GetDayOfWeek==7)) DSTcur=1;
  if((GetDayOfMonth==26)&&(GetDayOfWeek==7)) DSTcur=1;
  if((GetDayOfMonth==25)&&(GetDayOfWeek==7)) DSTcur=1;
  }
  if((GetMonth==10)&&(GetDayOfMonth>24))//detect last week
  {
  if((GetDayOfMonth==31)&&(GetDayOfWeek==7)) DSTcur=0;
  if((GetDayOfMonth==30)&&(GetDayOfWeek==7)) DSTcur=0;
  if((GetDayOfMonth==29)&&(GetDayOfWeek==7)) DSTcur=0;
  if((GetDayOfMonth==28)&&(GetDayOfWeek==7)) DSTcur=0;
  if((GetDayOfMonth==27)&&(GetDayOfWeek==7)) DSTcur=0;
  if((GetDayOfMonth==26)&&(GetDayOfWeek==7)) DSTcur=0;
  if((GetDayOfMonth==25)&&(GetDayOfWeek==7)) DSTcur=0;
  }
  }
  //-----------------------------------------------------------------
  start();
  return (0);
}
//=================================================================================================================================================//
int deinit()
{
  ObjectDelete("Background1");
  ObjectDelete("Background2");
  Comment("");//clear comments
  return (0);
}
//=================================================================================================================================================//
int start()
{ 
  Trade=true;
  CCI_Buy_Sig=0;
  CCI_Sell_Sig=0;  
  WPR_Buy_Sig=0;
  WPR_Sell_Sig=0;
  MA_Buy_Sig1=0;
  MA_Sell_Sig1=0;
  MA_Buy_Sig2=0;
  MA_Sell_Sig2=0;  
  MA_Slope_Buy_Sig=0;
  MA_Slope_Sell_Sig=0;  
  Fractals_Buy_Sig=0;
  Fractals_Sell_Sig=0;
  BB_Buy_Sig=0;
  BB_Sell_Sig=0;
  Trade_Pause_Buy_Sig=true;
  Trade_Pause_Sell_Sig=true; 
  MA_Dist_Buy_Sig=0;
  MA_Dist_Sell_Sig=0;   
  RSI_Buy_Sig=0;
  RSI_Sell_Sig=0;    
  CCI_Exit_Buy_Sig=0;
  CCI_Exit_Sell_Sig=0;  
  WPR_Exit_Buy_Sig=0;
  WPR_Exit_Sell_Sig=0;
  FirstSignalBuy=0;
  FirstSignalSell=0;
  //-----------------------------------------------------------------
  //Time Offset
  if((IsTesting())||(IsOptimization()))
  {
  if(GMT_Offset==99) {Alert("Please set GMT Offset in the EA inputs"); Sleep(60000); return(0);}
  DST();
  if((DSTcur==1)&&(DSTprv==0)) DSTextern=-1;
  if((DSTcur==1)&&(DSTprv==1)) DSTextern=0;
  if((DSTcur==0)&&(DSTprv==0)) DSTextern=0;
  if((DSTcur==0)&&(DSTprv==1)) DSTextern=1;
  }
  else DSTextern=0;
  //---
  if((!IsTesting())&&(!IsOptimization())) GMT_Offset=GMTOffset();
  //---
  StarHour=Open_Hour+GMT_Offset+DSTextern;
  EndHour=Close_Hour+GMT_Offset+DSTextern;
  Friday_Hour=Friday_Hour+GMT_Offset+DSTextern;
  if(StarHour>=24) StarHour=StarHour-24;
  if(EndHour>=24) EndHour=EndHour-24;
  //-----------------------------------------------------------------
  if(((IsTesting())||(IsOptimization()))&&((PrvHoursCheck1==PrvHoursCheck2)||(PrvHoursCheck1>PrvHoursCheck2))) return(0);//optimization confirm
  if(PauseOnLoss==true) CountHistoryOrders();
  CountCurrentOrders();
  //-----------------------------------------------------------------
  //confirm use indicators
  if(!Use_CCI  && !Use_WPR && !Use_Fractals) {Print("You must use at least one signal (CCI, WPR, or Fractals"); return(0);} 
  //-----------------------------------------------------------------
  //trade time
  if(!TradeOnFriday && TimeDayOfWeek(TimeCurrent()-GMT_Offset*3600) == 5) Trade = FALSE;
  if(TradeOnFriday && DayOfWeek() == 5 && TimeHour(TimeCurrent()) > (Friday_Hour)) Trade = FALSE;
  if(StarHour < EndHour && TimeHour(TimeCurrent())<StarHour || TimeHour(TimeCurrent())>=EndHour) Trade = FALSE;
  if(StarHour > EndHour && TimeHour(TimeCurrent())<StarHour && TimeHour(TimeCurrent())>= EndHour) Trade = FALSE;
  if((TimeHour(TimeCurrent())==StarHour)&&(TimeMinute(TimeCurrent())<DelaySessionMinutes)&&(DelaySessionMinutes>0)) Trade = FALSE;
  if(Month()==12 && Day()>22)  Trade = FALSE; 
  if(Month()==1 && Day()<5)  Trade = FALSE; 
  //-----------------------------------------------------------------
  //check spread
  //if((!IsTesting())&&(!IsOptimization()))
  //{
  if(Trade && TotalOpenOrders==0 && !Allow_Second_Trade && Spread()<Max_Spread_Open*PointsDec && (Ask-Bid)<Max_Spread_Open*PointsDec) Session="Trade Session Open .. Waiting for trades";
  if(Trade && TotalOpenOrders==0 && Spread()<Max_Spread_Open*PointsDec && (Ask-Bid)<Max_Spread_Open*PointsDec) Session="Trade Session Open .. Waiting for trades";  
  if(Trade && TotalOpenOrders==0 && (Spread()>Max_Spread_Open*PointsDec|| (Ask-Bid)>Max_Spread_Open*PointsDec)) Session="Trade Session Open .. Spread is High .. Trading Halted";
  if(Trade && TotalOpenOrders>0 && (Spread()>Max_Spread_Close*PointsDec|| (Ask-Bid)>Max_Spread_Close*PointsDec)) Session="Trade Session Open..Waiting to exit trades..Trading Halted"; 
  if(Trade && TotalOpenOrders>0 && (Spread()<Max_Spread_Close*PointsDec|| (Ask-Bid)<Max_Spread_Close*PointsDec)) Session="Trade Session Open..Waiting to exit trades.."; 
  if(!Trade && TotalOpenOrders==0) Session="Trade Session Closed";
  if(!Trade && TotalOpenOrders>0) Session="Trade Session Closed .. Waiting to exit trades"; 
  if(IsNewsTime()==true) Session="News en cours";
  //+-----------------------------------------------------------------------------------------------------+
  //Manage los trade
  if(PauseOnLoss==true)
  {
  int PauseMaxSeconds=60*PauseMaxMinutes;
  int i;
  if(LastClosedPips>=PauseMinPips)
  if(TimeCurrent()-LastClosedTime<=PauseMaxSeconds)
  {
  i = MathCeil(-PauseMaxSeconds*LastClosedPips/StopLoss);
  if(TimeCurrent()-LastClosedTime<=i)
  switch(LastClosedType)
  {
  case OP_BUY:
  Trade_Pause_Buy_Sig=false;
  break;
  case OP_SELL:
  Trade_Pause_Sell_Sig=false;
  break;
  }
  }
  } // end if(PauseOnLoss)
  //+-----------------------------------------------------------------------------------------------------+
  //News filter
  if((Use_NewsFilter==true)&&(Trade==true)) if(IsNewsTime()==true) Trade=false;
  //-----------------------------------------------------------------
  Display(); //Add Disply
  if(Show_Fractal_Levels) iCustom(NULL,0,"Fractal_Levels",MidFractalDist,OppositFractalDist,0,0);
  Spread(Ask-Bid); //get spread
  if(!Hide_SL_TP && TotalOpenOrders>0) ModifyAll(1); // Double check to make sure all trades have TP and SL 
  //}//end if(!IsTesting() && !IsOptimization()) 
  //-----------------------------------------------------------------
  //Reset volume
  //if(TimeHour(TimeCurrent())!=StarHour)
  if(Trade==false)
  {
  CheckLevelPriceBuy=0;
  CheckLevelPriceSell=0;
  }
  //-----------------------------------------------------------------
  //filter atr
  if(Trade || OrdersTotal()>0)
  {
  FilterATR=0;
  if((UseATRfilter==true)&&(TotalOpenOrders==0)&&(New_Trade))
  {
  switch(Type_ATR_level)
  {
  case 1: if(iATR(NULL, 0, Atr_Period, 0) > AtrLevel) FilterATR=1; break;
  case 2: if(iATR(NULL, 0, Atr_Period, 0) < AtrLevel) FilterATR=1; break;
  }
  }
  if(UseATRfilter==false) FilterATR=1;
  //-----------------------------------------------------------------
  //indicators
  if(Use_CCI) CCI_1 = iCCI(NULL, 0, CCI_Period, PRICE_CLOSE, 0);  
  if(Use_WPR) WPR_1 = iWPR(NULL, 0, WPR_Period, 0);
  //---
  if((Trade==true)&&(FilterATR==1)&&(TotalOpenOrders==0)&&(New_Trade==true))
  {
  if(Use_MA1) MA_1_1  = iMA(NULL,0,MA_Period1,0,MA_Mode1,PRICE_CLOSE,1);
  if(Use_MA1) MA_1_2  = iMA(NULL,0,MA_Period1,0,MA_Mode1,PRICE_CLOSE,2);    
  if(Use_MA2 || Use_MA2_Slope) MA_2_1  = iMA(NULL,0,MA_Period2,0,MA_Mode2,PRICE_CLOSE,1);
  if(Use_MA2 || Use_MA2_Slope) MA_2_2  = iMA(NULL,0,MA_Period2,0,MA_Mode2,PRICE_CLOSE,2);
  if(Use_MA_Dist) MA_3_1  = iMA(NULL,0,MA_Dist_Period,0,MA_Dist_Mode,PRICE_CLOSE,1);
  if(Use_BB) BB_L_1  = iBands(NULL,0,BB_Period,BB_Dev,0,PRICE_CLOSE,MODE_LOWER,0);
  if(Use_BB) BB_L_2  = iBands(NULL,0,BB_Period,BB_Dev,0,PRICE_CLOSE,MODE_LOWER,1); 
  if(Use_BB) BB_L_3  = iBands(NULL,0,BB_Period,BB_Dev,0,PRICE_CLOSE,MODE_LOWER,2);    
  if(Use_BB) BB_U_1  = iBands(NULL,0,BB_Period,BB_Dev,0,PRICE_CLOSE,MODE_UPPER,0);    
  if(Use_BB) BB_U_2  = iBands(NULL,0,BB_Period,BB_Dev,0,PRICE_CLOSE,MODE_UPPER,1);
  if(Use_BB) BB_U_3  = iBands(NULL,0,BB_Period,BB_Dev,0,PRICE_CLOSE,MODE_UPPER,2);    
  if(Use_RSI) RSI_1  = iRSI(NULL, 0, RSI_Period, PRICE_CLOSE, 0);
  //-----------------------------------------------------------------
  //trade signals
  if(!Use_CCI) {CCI_Buy_Sig=1;CCI_Sell_Sig=1;}
  if(!Use_WPR) {WPR_Buy_Sig=1;WPR_Sell_Sig=1;}  
  if(!Use_MA1) {MA_Buy_Sig1=1; MA_Sell_Sig1=1;} 
  if(!Use_MA2) {MA_Buy_Sig2=1; MA_Sell_Sig2=1;}  
  if(!Use_MA2_Slope) {MA_Slope_Buy_Sig=1; MA_Slope_Sell_Sig=1;}  
  if(!Use_Fractals) {Fractals_Buy_Sig=1; Fractals_Sell_Sig=1;}
  if(!Use_BB) {BB_Buy_Sig=1; BB_Sell_Sig=1;}
  if(!Use_MA_Dist) {MA_Dist_Buy_Sig=1; MA_Dist_Sell_Sig=1;} 
  if(!Use_RSI) {RSI_Buy_Sig=1; RSI_Sell_Sig=1;}  
  if(Use_CCI && CCI_1<-CCI_Entry) CCI_Buy_Sig=1;
  if(Use_CCI && CCI_1>CCI_Entry) CCI_Sell_Sig=1;  
  if(Use_WPR && WPR_1<-WPR_Entry) WPR_Buy_Sig=1;  
  if(Use_WPR && WPR_1>-(100-WPR_Entry)) WPR_Sell_Sig=1;  
  if(Use_MA1 && MA_1_1>MA_1_2)  MA_Buy_Sig1=1;  
  if(Use_MA1 && MA_1_1<MA_1_2)  MA_Sell_Sig1=1;
  if(Use_MA2 && MA_2_1>MA_2_2)  MA_Buy_Sig2=1;  
  if(Use_MA2 && MA_2_1<MA_2_2)  MA_Sell_Sig2=1;  
  if(Use_MA2_Slope && (MA_2_1-MA_2_2)>=MA_Slope*PointsDec)  MA_Slope_Buy_Sig=1;  
  if(Use_MA2_Slope && (MA_2_2-MA_2_1)>=MA_Slope*PointsDec)  MA_Slope_Sell_Sig=1;    
  if(Use_BB && !Use_BB_Direction && Ask<BB_L_1 && (BB_U_1-BB_L_1)>BB_Range*PointsDec && BB_L_1-Ask>=BB_Penetration*PointsDec) BB_Buy_Sig=1;
  if(Use_BB && !Use_BB_Direction && Bid>BB_U_1 && (BB_U_1-BB_L_1)>BB_Range*PointsDec && Bid-BB_U_1>=BB_Penetration*PointsDec) BB_Sell_Sig=1;  
  if(Use_BB && Use_BB_Direction && Ask<BB_L_1 && (BB_U_1-BB_L_1)>BB_Range*PointsDec && BB_L_1-Ask>=BB_Penetration*PointsDec && BB_L_1>BB_L_2) BB_Buy_Sig=1;
  if(Use_BB && Use_BB_Direction && Bid>BB_U_1 && (BB_U_1-BB_L_1)>BB_Range*PointsDec && Bid-BB_U_1>=BB_Penetration*PointsDec && BB_U_1<BB_U_2) BB_Sell_Sig=1;  
  if(Use_MA_Dist && Bid-MA_3_1>=Dist_to_MA*PointsDec)  MA_Dist_Sell_Sig=1;   
  if(Use_RSI && RSI_1>=RSI_Entry)  RSI_Buy_Sig=1;  
  if(Use_RSI && RSI_1<=(100-RSI_Entry))  RSI_Sell_Sig=1;
  //---------------------------------------------------------
  //Extern first signals
  if((Spread()<Max_Spread_Open*PointsDec)&&((Ask-Bid)<Max_Spread_Open*PointsDec)&&(Time[0]!=Last_Time))
  { 
  if((CCI_Buy_Sig==1)&&(WPR_Buy_Sig==1)&&(MA_Buy_Sig1==1)&&(MA_Buy_Sig2==1)&&(MA_Slope_Buy_Sig==1)&&(BB_Buy_Sig==1)&&(Trade_Pause_Buy_Sig==true)&&(MA_Dist_Buy_Sig==1)&&(RSI_Buy_Sig==1)) FirstSignalBuy=1;
  if((CCI_Sell_Sig==1)&&(WPR_Sell_Sig==1)&&(MA_Sell_Sig1==1)&&(MA_Sell_Sig2==1)&&(MA_Slope_Sell_Sig==1)&&(BB_Sell_Sig==1)&&(Trade_Pause_Sell_Sig==true)&&(MA_Dist_Sell_Sig==1)&&(RSI_Sell_Sig==1)) FirstSignalSell=1;
  }
  //---------------------------------------------------------
  //count fractals  
  if((Use_Fractals)&&((FirstSignalBuy==1)||(FirstSignalSell==1)))
  {
  for(int a=1;a<Bars;a++)
  {
  if(iFractals(NULL, 0, MODE_UPPER,a)!=0)
  {
  LastUpFractal=iFractals(NULL, 0, MODE_UPPER,a);
  break;
  }
  }
  for(int s=1;s<Bars;s++)
  {
  if(iFractals(NULL, 0, MODE_LOWER,s)!=0)
  {
  LastDownFractal=iFractals(NULL, 0, MODE_LOWER,s);
  break;
  }
  }
  midFractal=(LastUpFractal+LastDownFractal)/2; 
  //---
  if(Use_Fractals && Ask<(midFractal-MidFractalDist*PointsDec) && Ask<(LastUpFractal-OppositFractalDist*PointsDec)) Fractals_Buy_Sig=1;  
  if(Use_Fractals && Bid>(midFractal+MidFractalDist*PointsDec) && Bid>(LastDownFractal+OppositFractalDist*PointsDec)) Fractals_Sell_Sig=1;
  }//end if((Use_Fractals)..
  //---------------------------------------------------------
  //price levels
  if(UsePriceLevelFilter==true)
  {
  if(TimeHour(TimeCurrent())==StarHour)
  {
  if(iClose(NULL,PERIOD_H1,PrvHoursCheck2)>iClose(NULL,PERIOD_H1,PrvHoursCheck1)) CheckLevelPriceBuy=1;
  if(iClose(NULL,PERIOD_H1,PrvHoursCheck2)<iClose(NULL,PERIOD_H1,PrvHoursCheck1)) CheckLevelPriceSell=1;
  }
  }
  if(UsePriceLevelFilter==false)
  {
  CheckLevelPriceBuy=1;
  CheckLevelPriceSell=1;
  }  
  }// end if((Trade==true)&&(FilterATR==1)............
  //-----------------------------------------------------------------
  //exit signals
  if(TotalOpenOrders>0)
  {
  if(UseTrailingSL==true) ModifyAll(0);
  //---   
  if(Use_CCI && CCI_1>CCI_Exit) CCI_Exit_Buy_Sig=1;
  if(Use_CCI && CCI_1<-CCI_Exit) CCI_Exit_Sell_Sig=1;  
  if(Use_WPR && WPR_1>-WPR_Exit) WPR_Exit_Buy_Sig=1;  
  if(Use_WPR && WPR_1<(-100+WPR_Exit)) WPR_Exit_Sell_Sig=1; 
  //-----------------------------------------------------------------
  if (CloseIfIndy == TRUE)
  {
		//close trades
		if((CCI_Exit_Buy_Sig==1 || WPR_Exit_Buy_Sig==1) && Spread()<Max_Spread_Close*PointsDec && (Ask-Bid)<Max_Spread_Close*PointsDec) CloseAll(0,OP_BUY);
		if((CCI_Exit_Sell_Sig==1 || WPR_Exit_Sell_Sig==1) && Spread()<Max_Spread_Close*PointsDec && (Ask-Bid)<Max_Spread_Close*PointsDec) CloseAll(0,OP_SELL);
		}//end if(TotalOpenOrders>0)
  }
  
  //-----------------------------------------------------------------
  //open trades
  //---First buy trade
  if(TotalOpenOrders==0)
  {
  //---
  if((FirstSignalBuy==1)&&(CheckLevelPriceBuy==1)&&(Fractals_Buy_Sig==1)) 
  {
  Lot=CalculateLots(Risk);
  int Ticket_1=0;
  //---
  Ticket_1 = OrderSend(Symbol(), OP_BUY, Lot, Ask, Slippage, 0, 0, EA_Comment, Magic, 0, Blue);
  //---
  if(Ticket_1>0)
  {
  Last_Time=iTime(NULL,0,0);
  if(!Hide_SL_TP) ModifyAll(1);
  if(SendMailInfo==true)  SendMail("Open Buy","No Of Ticket: "+Ticket_1+"  Order Open Price: "+Ask);
  }
  //---
  }
  //---First sell trade   
  if((FirstSignalSell==1)&&(CheckLevelPriceSell==1)&&(Fractals_Sell_Sig==1)) 
  {
  Lot=CalculateLots(Risk);
  int Ticket_2=0;
  //---
  Ticket_2 = OrderSend(Symbol(), OP_SELL, Lot, Bid, Slippage, 0, 0, EA_Comment, Magic, 0, Red);
  if(Ticket_2>0)
  {
  Last_Time=iTime(NULL,0,0);
  if(!Hide_SL_TP) ModifyAll(1);
  if(SendMailInfo==true)  SendMail("Open Sell","No Of Ticket: "+Ticket_1+"  Order Open Price: "+Bid);
  }
  //---
  }
  }  //end if(TotalOpenOrders==0)
  //---Second buy trade
  if((TotalOpenOrders==1)&&(Allow_Second_Trade==true))
  {
  if(Time[0]!=Last_Time && Trade_Pause_Buy_Sig==true && Trade_Pause_Buy_Sig==1 && LastOpenType==0 && Ask<=(LastBuyPrice-Distance*PointsDec))
  {
  Lot=CalculateLots(Risk*Lot_Factor);
  Ticket_1=0;
  //---
  Ticket_1 = OrderSend(Symbol(), OP_BUY, Lot, Ask, Slippage, 0, 0, EA_Comment, Magic, 0, Blue);
  if(Ticket_1>0)
  {
  Last_Time=iTime(NULL,0,0);
  if(!Hide_SL_TP) ModifyAll(1);
  if(SendMailInfo==true)  SendMail("Open Buy","No Of Ticket: "+Ticket_1+"  Order Open Price: "+Ask);
  }
  //---
  }
  //---Second sell trade   
  if(Time[0]!=Last_Time && Trade_Pause_Sell_Sig==true && Trade_Pause_Sell_Sig==1 && LastOpenType==1 && Bid>=(LastSellPrice+Distance*PointsDec))
  {
  Lot=CalculateLots(Risk*Lot_Factor);
  Ticket_2=0;
  //---
  Ticket_2 = OrderSend(Symbol(), OP_SELL, Lot, Bid, Slippage, 0, 0, EA_Comment, Magic, 0, Red);
  if(Ticket_2>0)
  {
  Last_Time=iTime(NULL,0,0);
  if(!Hide_SL_TP) ModifyAll(1);
  if(SendMailInfo==true)  SendMail("Open Sell","No Of Ticket: "+Ticket_1+"  Order Open Price: "+Bid);
  }
  //---
  }
  }//end (TotalOpenOrders==1)
  //---
  } //end (Trade || OrdersTotal()>0)  
  return (0);
}
//=================================================================================================================================================//
void CountCurrentOrders()
{
  int total=OrdersTotal();
  TotalOpenOrders=0;
  LastBuyPrice=0;
  LastSellPrice=0;
  LastOpenType=-1;
  SumProfit=0;
  NetProfit=0;
  //-----------------------------------------------------------------
  for(int cnt=0; cnt<total; cnt++)
  {
  if(OrderSelect(cnt,SELECT_BY_POS, MODE_TRADES)==false) continue;
  if(OrderSelect(cnt,SELECT_BY_POS,MODE_TRADES))
  {
  if((OrderSymbol()!=Symbol())||(OrderMagicNumber()!=Magic)) continue;
  if((OrderMagicNumber()==Magic)&&(OrderSymbol()==Symbol())&&(OrderType()<=OP_SELL))
  {
  if(OrderType()==OP_BUY)
  {
  LastBuyPrice=OrderOpenPrice();
  LastOpenType=OP_BUY;
  if((Hide_SL_TP==true)&&(Ask-OrderOpenPrice()>=TakeProfit*PointsDec)||(OrderOpenPrice()-Ask>=StopLoss*PointsDec)) CloseAll(OrderTicket(),OrderType());
  }
  if(OrderType()==OP_SELL)
  {
  LastSellPrice=OrderOpenPrice();
  LastOpenType=OP_SELL;
  if((Hide_SL_TP==true)&&(OrderOpenPrice()-Bid>=TakeProfit*PointsDec)||(Bid-OrderOpenPrice()>=StopLoss*PointsDec)) CloseAll(OrderTicket(),OrderType());
  }
  TotalOpenOrders++;
  SumProfit+=OrderProfit()+OrderCommission()+OrderSwap();
  NetProfit+=OrderProfit();
  }
  }
  }
  //-----------------------------------------------------------------
  return(0);
}
//=================================================================================================================================================//
void CountHistoryOrders()
{
  int total=OrdersHistoryTotal();
  HistoryProfits=0;
  LastClosedProfit=0;
  LastClosedPrice=0;
  LastClosedType=-1;
  LastClosedTime=0;
  LastClosedPips=0;
  //-----------------------------------------------------------------
  for(int cnt=0; cnt<total; cnt++)
  {
  if(OrderSelect(cnt,SELECT_BY_POS, MODE_HISTORY)==false) continue;
  if(OrderSelect(cnt,SELECT_BY_POS,MODE_HISTORY))
  {
  if((OrderSymbol()!=Symbol())||(OrderMagicNumber()!=Magic)) continue;
  if((OrderMagicNumber()==Magic)&&(OrderSymbol()==Symbol())&&(OrderType()<=OP_SELL))
  {
  LastClosedProfit=OrderProfit()+OrderCommission()+OrderSwap();
  HistoryProfits+=OrderProfit()+OrderCommission()+OrderSwap();
  if(OrderType()==OP_BUY)
  {
  LastClosedPrice=OrderClosePrice();
  LastClosedTime=OrderCloseTime();
  LastClosedType=OP_BUY;
  LastClosedPips=(OrderOpenPrice()-OrderClosePrice())/PointsDec;
  }
  if(OrderType()==OP_SELL)
  {
  LastClosedPrice=OrderClosePrice();
  LastClosedTime=OrderCloseTime();
  LastClosedType=OP_SELL;
  LastClosedPips=(OrderClosePrice()-OrderOpenPrice())/PointsDec;
  }
  }
  }
  }
  //-----------------------------------------------------------------
  return(0);
}
//=================================================================================================================================================//
void CloseAll(int OrdrTicket, int OrdrType) 
{ 
  bool WasOrderClosed;
  for (int cnt = OrdersTotal()-1 ; cnt >= 0; cnt--) 
  { 
  if(OrderSelect(cnt,SELECT_BY_POS,MODE_TRADES))
  {
  if(OrderSymbol() == Symbol() && OrderMagicNumber() == Magic && OrderCloseTime()==0) 
  {
  //--- close buy
  if((OrderType()==OP_BUY)&&(OrderType()==OrdrType)&&((OrderTicket()==OrdrTicket)||(OrdrTicket==0)))
  {
  WasOrderClosed=false;
  WasOrderClosed=OrderClose(OrderTicket(),OrderLots(),Bid,Slippage,Blue);
  if(WasOrderClosed>0) if(SendMailInfo==true)  SendMail("Close Buy","No Of Ticket: "+OrderTicket()+"  Order Close Price: "+Bid+"  Profit Order: "+OrderProfit());
  }
  //--- close sell
  if((OrderType()==OP_SELL)&&(OrderType()==OrdrType)&&((OrderTicket()==OrdrTicket)||(OrdrTicket==0)))
  {
  WasOrderClosed=false;
  WasOrderClosed=OrderClose(OrderTicket(),OrderLots(),Ask,Slippage,Red);
  if(WasOrderClosed>0) if(SendMailInfo==true)  SendMail("Close Sell","No Of Ticket: "+OrderTicket()+"  Order Close Price: "+Ask+"  Profit Order: "+OrderProfit());
  }
  //---
  } 
  }
  }
  return(0); 
}
//=================================================================================================================================================//
double CalculateLots(double r) 
{
  double LotSize;
  //---
  if(lot>0.0) LotSize = lot;//manual
  else
  {
  if(CountRiskBaseSL==true) LotSize=(AccountEquity()*(r/100))/(StopLoss*((TickValue*PointsDec)/TickSize));//auto
  if(CountRiskBaseSL==false) LotSize=AccountBalance()/100000.0*r;//auto
  }
  //---
  return(MathMin(MathMax(MinLot,MathRound(LotSize/LotStep)*LotStep),MaxLot));
}
//=================================================================================================================================================//
void ModifyAll(int TypeModify) 
{ 
  for(int cnt = OrdersTotal()-1; cnt >= 0; cnt--) 
  { 
  if(OrderSelect(cnt,SELECT_BY_POS,MODE_TRADES)==false) continue;
  if(OrderSelect(cnt,SELECT_BY_POS,MODE_TRADES))
  { 
  if(OrderSymbol() == Symbol() && OrderMagicNumber() == Magic ) 
  {
  //--put stop loss and take profit
  if((OrderStopLoss()==0 || OrderTakeProfit()==0)&&(TypeModify==1))
  {
  if(OrderType()==OP_BUY)
  OrderModify(OrderTicket(),OrderOpenPrice(),ND(Bid-PointsDec*StopLoss), ND(Ask+TakeProfit*PointsDec),0,Blue); 
  if(OrderType()==OP_SELL)
  OrderModify(OrderTicket(),OrderOpenPrice(),ND(Ask+PointsDec*StopLoss), ND(Bid-TakeProfit*PointsDec),0,Red);
  }
  //---trailing stop loss
  if(TypeModify==0)
  {
  //if((OrderType()==OP_BUY)&&(Bid-OrderStopLoss()>TrailingPips*PointsDec)&&(Bid-OrderOpenPrice()>=TrailingAfter*PointsDec))
  if((OrderType()==OP_BUY)&&(Bid-OrderStopLoss()>TrailingPips*PointsDec)&&(Bid-OrderOpenPrice()>=TrailingAfter*PointsDec))
  OrderModify(OrderTicket(),OrderOpenPrice(),ND(OrderOpenPrice()+((Bid-OrderOpenPrice())-TrailingPips*PointsDec)), OrderTakeProfit(),0,Blue); 
  //if((OrderType()==OP_SELL)&&(OrderStopLoss()-Ask>TrailingPips*PointsDec)&&(OrderOpenPrice()-Ask>=TrailingAfter*PointsDec))
  if((OrderType()==OP_SELL)&&(OrderStopLoss()-Ask>TrailingPips*PointsDec)&&(OrderOpenPrice()-Ask>=TrailingAfter*PointsDec))
  OrderModify(OrderTicket(),OrderOpenPrice(),ND(OrderOpenPrice()-((OrderOpenPrice()-Ask)-TrailingPips*PointsDec)), OrderTakeProfit(),0,Red);
  }
  //---
  } 
  }
  }
  return(0);
}
//=================================================================================================================================================//
double Spread(double AddValue=0)
{
  double LastValue;
  static double ArrayTotal=0;
  //--- 
  if(AddValue == 0 && SpreadSampleSize <= 0) return(Ask-Bid);
  if(AddValue == 0 && ArrayTotal == 0) return(Ask-Bid);
  if(AddValue == 0 ) return(ArrayTotal/ArraySize(Spread));
  //--- 
  ArrayTotal = ArrayTotal + AddValue;
  ArraySetAsSeries(Spread, true); 
  if(ArraySize(Spread) == SpreadSampleSize)
  {
  LastValue = Spread[0];
  ArrayTotal = ArrayTotal - LastValue;
  ArraySetAsSeries(Spread, false);
  ArrayResize(Spread, ArraySize(Spread)-1 );
  ArraySetAsSeries(Spread, true);
  ArrayResize(Spread, ArraySize(Spread)+1 ); 
  }
  else ArrayResize(Spread, ArraySize(Spread)+1 ); 
  ArraySetAsSeries(Spread, false);
  Spread[0] = AddValue;
  //---
  return(NormalizeDouble(ArrayTotal/ArraySize(Spread), Digits));
}
//=================================================================================================================================================//
int MagicNumber()
{
  string SymbolName=Symbol();
  string ExpertName=WindowExpertName();
  int SymbolDigits=StringLen(SymbolName);
  int ExpertDigits=StringLen(ExpertName);
  int PairID=0;
  int ExpertID=0;
  int cnt;
  //---ID expert name
  for(cnt=0; cnt<ExpertDigits; cnt++)
  ExpertID+=StringGetChar(ExpertName,cnt);
  //---ID symbol name
  for(cnt=0; cnt<SymbolDigits; cnt++)
  PairID+=(StringGetChar(SymbolName,cnt)*cnt);
  //---
  return(PairID+ExpertID);
}
//=================================================================================================================================================//
double ND(double Price)
{
  return(NormalizeDouble(Price,Digits));
} 
//=================================================================================================================================================//
void Display()
{
  string DelayCom="00";
  if(DelaySessionMinutes<10) DelayCom="0"+DelaySessionMinutes;
  if(DelaySessionMinutes>9) DelayCom=DelaySessionMinutes;
  Comment( 
          "\n*=====================*",   
          "\n    "+EA_Name,
          "\n*=====================*",
          "\n   "+Session,
          "\n*=====================*",
          "\n    GMT Offset          = ",GMT_Offset,
          "\n    Broker Time          = ",TimeToStr(TimeCurrent(), TIME_MINUTES),
          "\n    Start Hour             = "+DoubleToStr(StarHour,0)+":"+DelayCom,          
          "\n    End Hour              = "+DoubleToStr(EndHour,0)+":00", 
          "\n*=====================*",                                                            
          "\n    Magic Number       = "+Magic,
          "\n    Max Spread Open  = "+DoubleToStr(Max_Spread_Open,1),
          "\n    Max Spread Close  = "+DoubleToStr(Max_Spread_Close,1),
          "\n    Average Spread    = "+DoubleToStr(Spread()/PointsDec,1),
          "\n    Lot size                 = "+DoubleToStr(CalculateLots(Risk),2),
          "\n    Stop Loss              = "+DoubleToStr(StopLoss,0), 
          "\n*=====================*",                                                            
          "\n    TotalProfit (Loss)    = "+DoubleToStr(SumProfit,2),
          "\n    NetProfit (Loss)      = "+DoubleToStr(NetProfit,2), 
          "\n*=====================*",                                                            
          "\n    History Profit (Loss) = "+DoubleToStr(HistoryProfits+SumProfit,2), 
          "\n*=====================*",
          "\n    B A L A N C E       = "+ DoubleToStr(AccountBalance(),2),
          "\n    E Q U I T Y          = "+ DoubleToStr(AccountEquity(),2),
          "\n    L E V E R A G E    = "+ DoubleToStr(AccountLeverage(),2),            
          "\n*=====================*"
         );
  return(0);       
} 
//=================================================================================================================================================//
int DST()
{
  int GetMonth=Month();
  int GetDayOfMonth=Day();
  int GetDayOfWeek=DayOfWeek();
  if(GetDayOfWeek==0) GetDayOfWeek=7;
  //---
  if((GetMonth>3)&&(GetMonth<10)) DSTprv=1;
  if((GetMonth<3)&&(GetMonth>10)) DSTprv=0;
  if((GetMonth==3)&&(GetDayOfMonth<=24)) DSTprv=0;
  if((GetMonth==10)&&(GetDayOfMonth<=24)) DSTprv=1;
  //---
  if((GetMonth==3)&&(GetDayOfMonth>24))//detect last week
  {
  if((GetDayOfMonth==31)&&(GetDayOfWeek==7)) DSTprv=1;
  if((GetDayOfMonth==30)&&(GetDayOfWeek==7)) DSTprv=1;
  if((GetDayOfMonth==29)&&(GetDayOfWeek==7)) DSTprv=1;
  if((GetDayOfMonth==28)&&(GetDayOfWeek==7)) DSTprv=1;
  if((GetDayOfMonth==27)&&(GetDayOfWeek==7)) DSTprv=1;
  if((GetDayOfMonth==26)&&(GetDayOfWeek==7)) DSTprv=1;
  if((GetDayOfMonth==25)&&(GetDayOfWeek==7)) DSTprv=1;
  }
  if((GetMonth==10)&&(GetDayOfMonth>24))//detect last week
  {
  if((GetDayOfMonth==31)&&(GetDayOfWeek==7)) DSTprv=0;
  if((GetDayOfMonth==30)&&(GetDayOfWeek==7)) DSTprv=0;
  if((GetDayOfMonth==29)&&(GetDayOfWeek==7)) DSTprv=0;
  if((GetDayOfMonth==28)&&(GetDayOfWeek==7)) DSTprv=0;
  if((GetDayOfMonth==27)&&(GetDayOfWeek==7)) DSTprv=0;
  if((GetDayOfMonth==26)&&(GetDayOfWeek==7)) DSTprv=0;
  if((GetDayOfMonth==25)&&(GetDayOfWeek==7)) DSTprv=0;
  }
  //---
  return(0);
} 
//=================================================================================================================================================//
  int GMTOffset()
  {
  int TimeArray[4];
  int TZInfoArray[43];
  int nYear,nMonth,nDay,nHour,nMin,nSec,nMilliSec;
  string sMilliSec;
  GetSystemTime(TimeArray);
  nYear=TimeArray[0]&0x0000FFFF;
  nMonth=TimeArray[0]>>16;
  nDay=TimeArray[1]>>16;
  nHour=TimeArray[2]&0x0000FFFF;
  nMin=TimeArray[2]>>16;
  nSec=TimeArray[3]&0x0000FFFF;
  nMilliSec=TimeArray[3]>>16;
  string LocalTimeS=FormatDateTime(nYear,nMonth,nDay,nHour,nMin,nSec);
  double GMTdiff=TimeCurrent()-StrToTime(LocalTimeS);
  return(MathRound(GMTdiff/3600.0));
  }
//=================================================================================================================================================//
  string FormatDateTime(int nYear,int nMonth,int nDay,int nHour,int nMin,int nSec)
  {
  string sMonth,sDay,sHour,sMin,sSec;
  sMonth=100+nMonth;
  sMonth=StringSubstr(sMonth,1);
  sDay=100+nDay;
  sDay=StringSubstr(sDay,1);
  sHour=100+nHour;
  sHour=StringSubstr(sHour,1);
  sMin=100+nMin;
  sMin=StringSubstr(sMin,1);
  sSec=100+nSec;
  sSec=StringSubstr(sSec,1);
  return(StringConcatenate(nYear,".",sMonth,".",sDay," ",sHour,":",sMin,":",sSec));
  }
//=================================================================================================================================================//
/**  FFCal **
      extern bool 	IncludeHigh 		= true;
      extern bool 	IncludeMedium 		= true;
      extern bool 	IncludeLow 			= false;   //true;
      extern bool 	IncludeSpeaks 		= true; 		// news items with "Speaks" in them have different characteristics
      extern bool		IsEA_Call			= false;
      extern int		OffsetHours			= 0;      //-1;
      extern bool		AllowWebUpdates	= true;			// Set this to false when using in another EA or Chart, so that the multiple instances of the indicator dont fight with each other
      extern int		Alert1MinsBefore	= 0;			// Set to -1 for no Alert
      extern int		Alert2MinsBefore	= -1;			// Set to -1 for no Alert
      extern bool		ReportAllForUSD	= true;
      extern bool    ReportAllForEUR   = true;
      extern bool    ReportAllForGBP   = true;
                                                   // added and tested by a1ra, seems working OK.
      extern bool    ReportAllForNZD   = true;
      extern bool    ReportAllForJPY   = true;
      extern bool    ReportAllForAUD   = true;
      extern bool    ReportAllForCHF   = true;
      extern bool    ReportAllForCAD   = true;
      extern bool    ReportAllForCNY   = false;
      
      extern bool 	EnableLogging 		= false; 		// Perhaps remove this from externs once its working well
      extern bool		ShowNextTwoEvents	= true;
      extern bool		ShowVertNews		= false;
      extern int 		TxtSize 			   = 10;
      extern color 	TxtColorTitle 		= Gold;       //LightGray;
      extern color 	TxtColorNews 		= DeepSkyBlue;
      extern color 	TxtColorImpact 	= Red;
      extern color 	TxtColorPrevious 	= Peru;
      extern color 	TxtColorForecast 	= Lime;
      extern int		VertTxtShift 		= 21;			// How far away below the ask line we want to place our vertical news text
      extern int		VertLeftLineShift 	= 900;			// How far away to the left of the line we want to place our vertical news text
      extern int		VertRightLineShift 	= 200;			// How far away to the left of the line we want to place our vertical news text
      extern color	VertLineColor 		= SlateBlue;	// Color of our vertical news line
      extern color	VertTxtColor 		= Black;		// Color of our vertical text color 
      extern int		VertTxtSize 		= 8;			// Color of our vertical text
      extern int		NewsCorner 			= 1;			// Choose which corner to place headlines 0=Upper Left, 1=Upper Right, 2=lower left , 3=lower right
      extern bool		SaveXmlFiles		= false;		// If true, this will keep the daily XML files
**/

bool IsNewsTime()
{
  if(Use_NewsFilter==FALSE) return(FALSE);
  
  static bool rval = false;
  static int lm = -1;
  bool is_news = false;
  
  // uncomment next line if not global variable
  int minutesSincePrevEvent = 10080, minutesUntilNextEvent = 10080; // 1 week
  
  if (lm != Minute()) { // update news status, run every minute
      lm = Minute();

     // check high impact
     if(IncludeHigh) {
         minutesSincePrevEvent = iCustom(NULL, 0, "FFCal", IncludeHigh, false, false, false, true, GMT_Offset, true, -1, -1, ReportAllForUSD, ReportAllForEUR, ReportAllForGBP, ReportAllForNZD, ReportAllForJPY, ReportAllForAUD, ReportAllForCHF, ReportAllForCAD, ReportAllForCNY, 1, 0);
         minutesUntilNextEvent = iCustom(NULL, 0, "FFCal", IncludeHigh, false, false, false, true, GMT_Offset, true, -1, -1, ReportAllForUSD, ReportAllForEUR, ReportAllForGBP, ReportAllForNZD, ReportAllForJPY, ReportAllForAUD, ReportAllForCHF, ReportAllForCAD, ReportAllForCNY, 1, 1);
         
         if(minutesUntilNextEvent<=MinsBeforeHigh || minutesSincePrevEvent<=MinsAfterHigh)
            is_news = true;
     }

     // check medium impact
     if(IncludeMedium && !is_news) {
        minutesSincePrevEvent = iCustom(NULL, 0, "FFCal", false, IncludeMedium, false, false, true, GMT_Offset, true, -1, -1, ReportAllForUSD, ReportAllForEUR, ReportAllForGBP, ReportAllForNZD, ReportAllForJPY, ReportAllForAUD, ReportAllForCHF, ReportAllForCAD, ReportAllForCNY, 1, 0);
        minutesUntilNextEvent = iCustom(NULL, 0, "FFCal", false, IncludeMedium, false, false, true, GMT_Offset, true, -1, -1, ReportAllForUSD, ReportAllForEUR, ReportAllForGBP, ReportAllForNZD, ReportAllForJPY, ReportAllForAUD, ReportAllForCHF, ReportAllForCAD, ReportAllForCNY, 1, 1);
  
        if(minutesUntilNextEvent<=MinsBeforeMedium || minutesSincePrevEvent<=MinsAfterMedium)
            is_news = true;
     }

     // check low impact
     if(IncludeLow && !is_news) {
         minutesSincePrevEvent = iCustom(NULL, 0, "FFCal", false, false, IncludeLow, false, true, GMT_Offset, true, -1, -1, ReportAllForUSD, ReportAllForEUR, ReportAllForGBP, ReportAllForNZD, ReportAllForJPY, ReportAllForAUD, ReportAllForCHF, ReportAllForCAD, ReportAllForCNY, 1, 0);
         minutesUntilNextEvent = iCustom(NULL, 0, "FFCal", false, false, IncludeLow, false, true, GMT_Offset, true, -1, -1, ReportAllForUSD, ReportAllForEUR, ReportAllForGBP, ReportAllForNZD, ReportAllForJPY, ReportAllForAUD, ReportAllForCHF, ReportAllForCAD, ReportAllForCNY, 1, 1);
  
         if(minutesUntilNextEvent<=MinsBeforeLow || minutesSincePrevEvent<=MinsAfterLow)
            is_news = true;
     }
   
     // check speaks
     if(IncludeSpeaks && !is_news) {
         minutesSincePrevEvent = iCustom(NULL, 0, "FFCal", false, false, false, IncludeSpeaks, true, GMT_Offset, true, -1, -1, ReportAllForUSD, ReportAllForEUR, ReportAllForGBP, ReportAllForNZD, ReportAllForJPY, ReportAllForAUD, ReportAllForCHF, ReportAllForCAD, ReportAllForCNY, 1, 0);
         minutesUntilNextEvent = iCustom(NULL, 0, "FFCal", false, false, false, IncludeSpeaks, true, GMT_Offset, true, -1, -1, ReportAllForUSD, ReportAllForEUR, ReportAllForGBP, ReportAllForNZD, ReportAllForJPY, ReportAllForAUD, ReportAllForCHF, ReportAllForCAD, ReportAllForCNY, 1, 1);
  
         if(minutesUntilNextEvent<=MinsBeforeSpeaks || minutesSincePrevEvent<=MinsAfterSpeaks)
            is_news = true;
     }

     if(is_news)
         rval = true;
     else
         rval = false;
  }
  
  return(rval);
}
//=================================================================================================================================================//


