/*
   Generated by EX4-TO-MQ4 decompiler V4.0.445.5 [-]
   Website: https://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright 2011 www.forex-trading-software.ws"
#property link      "dj_ermoloff@mail.ru"

extern string Key = "Insert Key - visit www.forex-trading-software.ws";
extern string Start_Session = "07:00";
extern string End_Session = "16:00";
extern int Filtr = 0;
extern int Expiration_Minute = 360;
extern double Lot = 1.0;
extern double MM = 0.0;
extern int Paritet = 0;
extern int Shift_Paritet = 0;
extern int TakeProfit = 40;
extern int StopLoss = 75;
extern bool Use_Trailing_Stop = FALSE;
extern int Trailing_Stop = 15;
extern int Trailing_Step = 1;
extern int slippage = 2;
extern int Max_Box = 300;
extern int Min_Box = 40;
extern bool Delete_Pending_Orders = TRUE;
extern bool Trade_Friday = TRUE;
extern bool Reverse_Orders = FALSE;
extern bool Use_Martingail = TRUE;
extern int Martingail_Max_Orders = 3;
extern double Martingail_Multi_Lot = 2.66;
extern bool Martingail_X = TRUE;
extern int Martingail_X_Order = 2;
extern int X_Stop = 4;
extern string comment = "eurusd_0716";
extern int MagicNumber = 11180716;
bool gi_216;
int gi_220;
int gi_224 = 13;
int gi_228;
int gi_232;
int gi_236;
double g_price_240;
double g_price_248;
double g_price_256;
int g_error_264;
string gs_268;
double g_lots_276;
string gs_label_284 = "label";

int deinit() {
   ObjectDelete(gs_label_284);
   return (0);
}

int init() 
{
   int li_0;
   /*
   if (Key == "Insert Key - visit www.forex-trading-software.ws" || Key == "") 
   {
      gi_216 = FALSE;
      Print("Insert Key or visit www.forex-trading-software.ws");
      if (ObjectFind(gs_label_284) == -1) ObjectCreate(gs_label_284, OBJ_LABEL, 0, 0, 0);
      ObjectSet(gs_label_284, OBJPROP_CORNER, 1);
      ObjectSet(gs_label_284, OBJPROP_XDISTANCE, 5);
      ObjectSet(gs_label_284, OBJPROP_YDISTANCE, 15);
      ObjectSetText(gs_label_284, "Insert Key or visit www.forex-trading-software.ws", 10, "Tahoma", Red);
   } else */
   {
      Key = "123"; // :)
      
      li_0 = StrToInteger(StringSubstr(Key, 0, StringLen(Key) - 2)) / gi_224 + 4;
      gi_228 = StrToInteger(StringSubstr(Key, StringLen(Key) - 2, 2)) / StrToInteger(StringSubstr(Key, 0, 1));
      //if (AccountNumber() == li_0 || IsDemo() == TRUE || IsOptimization() == TRUE || IsTesting() == TRUE) 
      {
         gi_216 = TRUE;
         Print("Key activated");
         gs_label_284 = "label";
         if (ObjectFind(gs_label_284) == -1) ObjectCreate(gs_label_284, OBJ_LABEL, 0, 0, 0);
         ObjectSet(gs_label_284, OBJPROP_CORNER, 1);
         ObjectSet(gs_label_284, OBJPROP_XDISTANCE, 5);
         ObjectSet(gs_label_284, OBJPROP_YDISTANCE, 15);
         ObjectSetText(gs_label_284, "Key activated", 10, "Tahoma", Lime);
      }/* else {
         Print("Invalid key, visit www.forex-trading-software.ws");
         gs_label_284 = "label";
         if (ObjectFind(gs_label_284) == -1) ObjectCreate(gs_label_284, OBJ_LABEL, 0, 0, 0);
         ObjectSet(gs_label_284, OBJPROP_CORNER, 1);
         ObjectSet(gs_label_284, OBJPROP_XDISTANCE, 5);
         ObjectSet(gs_label_284, OBJPROP_YDISTANCE, 15);
         ObjectSetText(gs_label_284, "Invalid key, visit www.forex-trading-software.ws", 10, "Tahoma", Red);
      }*/
   }
   if (MarketInfo(Symbol(), MODE_DIGITS) == 5.0 || MarketInfo(Symbol(), MODE_DIGITS) == 3.0) gi_220 = 10;
   else gi_220 = 1;
   return (0);
}

int start() {
   if (!gi_216) return (0);
   bool li_0 = FALSE;
   for (int pos_4 = 0; pos_4 < OrdersTotal(); pos_4++) {
      if (OrderSelect(pos_4, SELECT_BY_POS, MODE_TRADES) == TRUE) {
         if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol()) {
            if (OrderType() >= OP_BUYLIMIT)
               if (OrderOpenTime() + 60 * Expiration_Minute < TimeCurrent()) OrderDelete(OrderTicket());
            if (OrderType() == OP_BUY) {
               li_0 = TRUE;
               if (Paritet != 0 && OrderOpenPrice() + Paritet * gi_220 * Point < Bid && NormalizeDouble(OrderOpenPrice(), Digits) > NormalizeDouble(OrderStopLoss() + Shift_Paritet * gi_220 * Point,
                  Digits)) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(OrderOpenPrice() + Shift_Paritet * gi_220 * Point, Digits), OrderTakeProfit(), 0, Green);
               if (Use_Trailing_Stop == TRUE && OrderStopLoss() + (Trailing_Stop + Trailing_Step) * gi_220 * Point <= Bid && NormalizeDouble(OrderOpenPrice(), Digits) <= NormalizeDouble(OrderStopLoss(),
                  Digits)) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(Bid - Trailing_Stop * gi_220 * Point, Digits), OrderTakeProfit(), 0, Yellow);
            }
            if (OrderType() == OP_SELL) {
               li_0 = TRUE;
               if (Paritet != 0 && OrderOpenPrice() - Paritet * gi_220 * Point > Ask && NormalizeDouble(OrderOpenPrice(), Digits) < NormalizeDouble(OrderStopLoss() - Shift_Paritet * gi_220 * Point,
                  Digits)) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(OrderOpenPrice() - Shift_Paritet * gi_220 * Point, Digits), OrderTakeProfit(), 0, Green);
               if (Use_Trailing_Stop == TRUE && OrderStopLoss() - (Trailing_Stop + Trailing_Step) * gi_220 * Point >= Ask && NormalizeDouble(OrderOpenPrice(), Digits) >= NormalizeDouble(OrderStopLoss(),
                  Digits)) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(Ask + Trailing_Stop * gi_220 * Point, Digits), OrderTakeProfit(), 0, Yellow);
            }
         }
      }
   }
   if (Delete_Pending_Orders && li_0) f0_8();
   if ((Trade_Friday && TimeDayOfWeek(TimeCurrent()) == 5) || TimeDayOfWeek(TimeCurrent()) != 5 && (!li_0) && gi_232 != iTime(Symbol(), PERIOD_D1, 0) && End_Session == TimeToStr(Time[0],
      TIME_MINUTES)) {
      if (!Reverse_Orders) gi_232 = f0_7(Start_Session, End_Session, StopLoss, TakeProfit, Filtr, comment, Max_Box, Min_Box);
      else gi_232 = f0_9(Start_Session, End_Session, StopLoss, TakeProfit, Filtr, comment, Max_Box, Min_Box);
   }
   if ((Trade_Friday && TimeDayOfWeek(TimeCurrent()) == 5) || TimeDayOfWeek(TimeCurrent()) != 5 && (!li_0) && gi_236 != iTime(Symbol(), PERIOD_D1, 0) && End_Session == TimeToStr(Time[0],
      TIME_MINUTES)) {
      if (!Reverse_Orders) gi_236 = f0_3(Start_Session, End_Session, StopLoss, TakeProfit, Filtr, comment, Max_Box, Min_Box);
      else gi_236 = f0_5(Start_Session, End_Session, StopLoss, TakeProfit, Filtr, comment, Max_Box, Min_Box);
   }
   return (0);
}

int f0_7(string as_0, string as_8, int ai_16, int ai_20, int ai_24, string as_28, int ai_36, int ai_40) {
   double ld_44 = f0_0(as_0, as_8);
   double ld_52 = f0_4(as_0, as_8);
   g_price_240 = ld_44 + MarketInfo(Symbol(), MODE_SPREAD) * Point + ai_24 * gi_220 * Point;
   if (ai_16 != 0) g_price_248 = NormalizeDouble(g_price_240 - ai_16 * gi_220 * Point, Digits);
   else g_price_248 = 0;
   if (ai_20 != 0) g_price_256 = NormalizeDouble(g_price_240 + ai_20 * gi_220 * Point, Digits);
   else g_price_256 = 0;
   if (ld_44 - ld_52 > ai_36 * gi_220 * Point) {
      Print("Размер коробки больше ", ai_36);
      return (iTime(Symbol(), PERIOD_D1, 0));
   }
   if (ld_44 - ld_52 < ai_40 * gi_220 * Point) {
      Print("Размер коробки меньше ", ai_40);
      return (iTime(Symbol(), PERIOD_D1, 0));
   }
   if (g_price_240 - Ask > MarketInfo(Symbol(), MODE_STOPLEVEL) * Point) {
      g_lots_276 = NormalizeDouble(f0_6(), 2);
      if (g_lots_276 > 0.0) OrderSend(Symbol(), OP_BUYSTOP, g_lots_276, g_price_240, slippage, g_price_248, g_price_256, as_28 + gs_268, MagicNumber, 0, Green);
      g_error_264 = GetLastError();
      if (g_error_264 != 0/* NO_ERROR */) Print("Ошибка ", g_error_264, " ", g_price_240, " buystop ", g_price_248, " ", g_price_256);
      else return (iTime(Symbol(), PERIOD_D1, 0));
   } else {
      Print("Цена близко к уровню открытия ордера.");
      if (g_price_240 < Ask) {
         g_lots_276 = NormalizeDouble(f0_6(), 2);
         if (g_lots_276 > 0.0) OrderSend(Symbol(), OP_BUY, g_lots_276, Ask, slippage, g_price_248, g_price_256, as_28 + gs_268, MagicNumber, 0, Green);
         g_error_264 = GetLastError();
         if (g_error_264 != 0/* NO_ERROR */) Print("Ошибка ", g_error_264, " ", g_price_240, " buy ", g_price_248, " ", g_price_256);
         else return (iTime(Symbol(), PERIOD_D1, 0));
      }
   }
   return (0);
}

int f0_3(string as_0, string as_8, int ai_16, int ai_20, int ai_24, string as_28, int ai_36, int ai_40) {
   double ld_44 = f0_0(as_0, as_8);
   double ld_52 = f0_4(as_0, as_8);
   g_price_240 = ld_52 - ai_24 * gi_220 * Point;
   if (ai_16 != 0) g_price_248 = NormalizeDouble(g_price_240 + ai_16 * gi_220 * Point, Digits);
   else g_price_248 = 0;
   if (ai_20 != 0) g_price_256 = NormalizeDouble(g_price_240 - ai_20 * gi_220 * Point, Digits);
   else g_price_256 = 0;
   if (ld_44 - ld_52 > ai_36 * gi_220 * Point) {
      Print("Размер коробки больше ", ai_36);
      return (iTime(Symbol(), PERIOD_D1, 0));
   }
   if (ld_44 - ld_52 < ai_40 * gi_220 * Point) {
      Print("Размер коробки меньше ", ai_40);
      return (iTime(Symbol(), PERIOD_D1, 0));
   }
   if (Bid - g_price_240 > MarketInfo(Symbol(), MODE_STOPLEVEL) * Point) {
      g_lots_276 = NormalizeDouble(f0_6(), 2);
      if (g_lots_276 > 0.0) OrderSend(Symbol(), OP_SELLSTOP, g_lots_276, g_price_240, slippage, g_price_248, g_price_256, as_28 + gs_268, MagicNumber, 0, Red);
      g_error_264 = GetLastError();
      if (g_error_264 != 0/* NO_ERROR */) Print("Ошибка ", g_error_264, " ", g_price_240, " sellstop ", g_price_248, " ", g_price_256);
      else return (iTime(Symbol(), PERIOD_D1, 0));
   } else {
      Print("Цена близко к уровню открытия ордера.");
      if (g_price_240 > Bid) {
         g_lots_276 = NormalizeDouble(f0_6(), 2);
         if (g_lots_276 > 0.0) OrderSend(Symbol(), OP_SELL, g_lots_276, Bid, slippage, g_price_248, g_price_256, as_28 + gs_268, MagicNumber, 0, Red);
         g_error_264 = GetLastError();
         if (g_error_264 != 0/* NO_ERROR */) Print("Ошибка ", g_error_264, " ", g_price_240, " sell ", g_price_248, " ", g_price_256);
         else return (iTime(Symbol(), PERIOD_D1, 0));
      }
   }
   return (0);
}

int f0_5(string as_0, string as_8, int ai_16, int ai_20, int ai_24, string as_28, int ai_36, int ai_40) {
   double ld_44 = f0_0(as_0, as_8);
   double ld_52 = f0_4(as_0, as_8);
   g_price_240 = ld_44 + MarketInfo(Symbol(), MODE_SPREAD) * Point + ai_24 * gi_220 * Point;
   if (ai_16 != 0) g_price_248 = NormalizeDouble(g_price_240 + ai_16 * gi_220 * Point, Digits);
   else g_price_248 = 0;
   if (ai_20 != 0) g_price_256 = NormalizeDouble(g_price_240 - ai_20 * gi_220 * Point, Digits);
   else g_price_256 = 0;
   if (ld_44 - ld_52 > ai_36 * gi_220 * Point) {
      Print("Размер коробки больше ", ai_36);
      return (iTime(Symbol(), PERIOD_D1, 0));
   }
   if (ld_44 - ld_52 < ai_40 * gi_220 * Point) {
      Print("Размер коробки меньше ", ai_40);
      return (iTime(Symbol(), PERIOD_D1, 0));
   }
   if (g_price_240 - Ask > MarketInfo(Symbol(), MODE_STOPLEVEL) * Point) {
      g_lots_276 = NormalizeDouble(f0_6(), 2);
      if (g_lots_276 > 0.0) OrderSend(Symbol(), OP_SELLLIMIT, g_lots_276, g_price_240, slippage, g_price_248, g_price_256, as_28 + gs_268, MagicNumber, 0, Red);
      g_error_264 = GetLastError();
      if (g_error_264 != 0/* NO_ERROR */) Print("Ошибка ", g_error_264, " ", g_price_240, " selllimit ", g_price_248, " ", g_price_256);
      else return (iTime(Symbol(), PERIOD_D1, 0));
   } else {
      Print("Цена близко к уровню открытия ордера.");
      if (g_price_240 < Bid) {
         g_lots_276 = NormalizeDouble(f0_6(), 2);
         if (g_lots_276 > 0.0) OrderSend(Symbol(), OP_SELL, NormalizeDouble(f0_6(), 2), Bid, slippage, g_price_248, g_price_256, as_28 + gs_268, MagicNumber, 0, Red);
         g_error_264 = GetLastError();
         if (g_error_264 != 0/* NO_ERROR */) Print("Ошибка ", g_error_264, " ", g_price_240, " sell ", g_price_248, " ", g_price_256);
         else return (iTime(Symbol(), PERIOD_D1, 0));
      }
   }
   return (0);
}

int f0_9(string as_0, string as_8, int ai_16, int ai_20, int ai_24, string as_28, int ai_36, int ai_40) {
   double ld_44 = f0_0(as_0, as_8);
   double ld_52 = f0_4(as_0, as_8);
   g_price_240 = ld_52 - ai_24 * gi_220 * Point;
   if (ai_16 != 0) g_price_248 = NormalizeDouble(g_price_240 - ai_16 * gi_220 * Point, Digits);
   else g_price_248 = 0;
   if (ai_20 != 0) g_price_256 = NormalizeDouble(g_price_240 + ai_20 * gi_220 * Point, Digits);
   else g_price_256 = 0;
   if (ld_44 - ld_52 > ai_36 * gi_220 * Point) {
      Print("Размер коробки больше ", ai_36);
      return (iTime(Symbol(), PERIOD_D1, 0));
   }
   if (ld_44 - ld_52 < ai_40 * gi_220 * Point) {
      Print("Размер коробки меньше ", ai_40);
      return (iTime(Symbol(), PERIOD_D1, 0));
   }
   if (Bid - g_price_240 > MarketInfo(Symbol(), MODE_STOPLEVEL) * Point) {
      g_lots_276 = NormalizeDouble(f0_6(), 2);
      OrderSend(Symbol(), OP_BUYLIMIT, g_lots_276, g_price_240, slippage, g_price_248, g_price_256, as_28 + gs_268, MagicNumber, 0, Green);
      g_error_264 = GetLastError();
      if (g_error_264 != 0/* NO_ERROR */) Print("Ошибка ", g_error_264, " ", g_price_240, " buylimit ", g_price_248, " ", g_price_256);
      else return (iTime(Symbol(), PERIOD_D1, 0));
   } else {
      Print("Цена близко к уровню открытия ордера.");
      if (g_price_240 > Ask) {
         g_lots_276 = NormalizeDouble(f0_6(), 2);
         OrderSend(Symbol(), OP_BUY, g_lots_276, Ask, slippage, g_price_248, g_price_256, as_28 + gs_268, MagicNumber, 0, Green);
         g_error_264 = GetLastError();
         if (g_error_264 != 0/* NO_ERROR */) Print("Ошибка ", g_error_264, " ", g_price_240, " buy ", g_price_248, " ", g_price_256);
         else return (iTime(Symbol(), PERIOD_D1, 0));
      }
   }
   return (0);
}

double f0_0(string as_0, string as_8) {
   for (int li_16 = 0; as_8 != TimeToStr(iTime(Symbol(), 0, li_16), TIME_MINUTES); li_16++) {
   }
   li_16++;
   double ihigh_20 = iHigh(Symbol(), 0, li_16);
   while (TimeToStr(iTime(Symbol(), 0, li_16), TIME_MINUTES) != as_0) {
      li_16++;
      if (ihigh_20 < iHigh(Symbol(), 0, li_16)) ihigh_20 = iHigh(Symbol(), 0, li_16);
   }
   return (NormalizeDouble(ihigh_20, Digits));
}

double f0_4(string as_0, string as_8) {
   for (int li_16 = 0; as_8 != TimeToStr(iTime(Symbol(), 0, li_16), TIME_MINUTES); li_16++) {
   }
   li_16++;
   double ilow_20 = iLow(Symbol(), 0, li_16);
   while (TimeToStr(iTime(Symbol(), 0, li_16), TIME_MINUTES) != as_0) {
      li_16++;
      if (ilow_20 > iLow(Symbol(), 0, li_16)) ilow_20 = iLow(Symbol(), 0, li_16);
   }
   return (NormalizeDouble(ilow_20, Digits));
}

int f0_8() {
   for (int pos_0 = 0; pos_0 < OrdersTotal(); pos_0++) {
      if (OrderSelect(pos_0, SELECT_BY_POS, MODE_TRADES) == TRUE) {
         if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
            if (OrderType() > OP_SELL) OrderDelete(OrderTicket());
      }
   }
   return (0);
}

double f0_6() {
   int str_len_28;
   int str2int_32;
   int str2int_36;
   string ls_0 = "";
   double order_lots_8 = 0;
   int datetime_16 = 0;
   int li_20 = 0;
   gs_268 = " #11";
   if (!Use_Martingail) return (f0_2());
   for (int pos_24 = 0; pos_24 < OrdersHistoryTotal(); pos_24++) {
      if (OrderSelect(pos_24, SELECT_BY_POS, MODE_HISTORY) == TRUE) {
         if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol()) {
            if (OrderCloseTime() > datetime_16 && OrderType() < OP_BUYLIMIT) {
               ls_0 = OrderComment();
               order_lots_8 = OrderLots();
               if (OrderProfit() > 0.0) li_20 = 1;
               else li_20 = 2;
               datetime_16 = OrderCloseTime();
            }
         }
      }
   }
   if (li_20 != 0) {
      str_len_28 = StringLen(comment);
      str2int_32 = StrToInteger(StringSubstr(ls_0, str_len_28 + 2, 1));
      str2int_36 = StrToInteger(StringSubstr(ls_0, str_len_28 + 3, 1));
      if (str2int_32 + str2int_36 - 2 >= X_Stop) return (f0_2());
      if (li_20 == 1) {
         if (Martingail_X && str2int_36 < Martingail_X_Order && str2int_32 > 1) {
            gs_268 = " #" + DoubleToStr(str2int_32, 0) + DoubleToStr(str2int_36 + 1, 0);
            Print(gs_268);
            return (order_lots_8);
         }
         gs_268 = " #11";
         Print(gs_268);
         return (f0_2());
      }
      if (li_20 == 2) {
         if (Martingail_X && str2int_36 < Martingail_X_Order && str2int_32 > 1 && str2int_36 > 1) {
            gs_268 = " #" + DoubleToStr(str2int_32, 0) + DoubleToStr(str2int_36 + 1, 0);
            Print(gs_268);
            return (order_lots_8);
         }
         if (str2int_32 < Martingail_Max_Orders) {
            gs_268 = " #" + DoubleToStr(str2int_32 + 1, 0) + DoubleToStr(str2int_36, 0);
            Print(gs_268);
            return (f0_1(order_lots_8 * Martingail_Multi_Lot));
         }
         gs_268 = " #11";
         Print(gs_268);
         return (f0_2());
      }
   }
   return (f0_2());
}

double f0_2() {
   double ld_0 = Lot;
   if (Lot == 0.0) ld_0 = AccountBalance() / 100000.0 * MM;
   return (f0_1(ld_0));
}

double f0_1(double ad_0) {
   ad_0 = MathRound(ad_0 / MarketInfo(Symbol(), MODE_LOTSTEP)) * MarketInfo(Symbol(), MODE_LOTSTEP);
   if (ad_0 > MarketInfo(Symbol(), MODE_MAXLOT)) ad_0 = MarketInfo(Symbol(), MODE_MAXLOT);
   if (ad_0 < MarketInfo(Symbol(), MODE_MINLOT)) ad_0 = MarketInfo(Symbol(), MODE_MINLOT);
   return (ad_0);
}